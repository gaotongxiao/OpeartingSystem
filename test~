%include "pm.inc"
org 0100h
jmp start

[SECTION .gdt]
gdt:Descriptor 0,0,0
gdtdos:     Descriptor 0,           doslen-1, DA_C    ; Normal 描述符
gdtvideo:Descriptor 0b8000h,0ffffh,DA_DRW+DA_DPL0
gdtvideolow:Descriptor 0b8000h,0ffffh,DA_DRW+DA_DPL3
gdtcode:Descriptor 0,codelen-1,DA_C+DA_32+DA_DPL0
gdtcodelow:Descriptor 0,codelowlen-1,DA_C+DA_32+DA_DPL3
gdtstack:     Descriptor 0,      TopOfStack, DA_DRWA+DA_32;Stack, 32 位
gdtgate:Gate snc,0,0,DA_386CGate+DA_DPL3
;gdtcode16:Descriptor 0,0ffffh,DA_C
gdtstacklow:     Descriptor 0,      TopOfStackLow, DA_DRWA+DA_32+DA_DPL3
gdttss:Descriptor 0,tsslen-1,DA_386TSS
gdtnewcode:Descriptor 0,newcodelen-1,DA_C+DA_32+DA_DPL0

gdtlen equ $-gdt
gdtptr dw gdtlen-1
       dd 0

sv equ gdtvideo-gdt
svl equ gdtvideolow-gdt+SA_RPL3
sc equ gdtcode-gdt
scl equ gdtcodelow-gdt+SA_RPL3
sst equ gdtstack-gdt
sg equ gdtgate-gdt
;sc16 equ gdtcode16-gdt
sstl equ gdtstacklow-gdt+SA_RPL3
stss equ gdttss-gdt
snc equ gdtnewcode-gdt
sdos equ gdtdos-gdt

[SECTION .LDT]
[BITS 32]
labelldt:
%rep 128
Gate sc,0,0,DA_386IGate
%endrep
Gate sc,hi,0,DA_386IGate+DA_DPL3

ldtlen equ $-labelldt
ldtptr dw ldtlen-1
       dd 0

[SECTION .tss]
[BITS	32]
labeltss:
		DD	0			; Back
		DD	TopOfStack		; 0 级堆栈
		DD	sst		; 
		DD	0			; 1 级堆栈
		DD	0			; 
		DD	0			; 2 级堆栈
		DD	0			; 
		DD	0			; CR3
		DD	0			; EIP
		DD	0			; EFLAGS
		DD	0			; EAX
		DD	0			; ECX
		DD	0			; EDX
		DD	0			; EBX
		DD	0			; ESP
		DD	0			; EBP
		DD	0			; ESI
		DD	0			; EDI
		DD	0			; ES
		DD	0			; CS
		DD	0			; SS
		DD	0			; DS
		DD	0			; FS
		DD	0			; GS
		DD	0			; LDT
		DW	0			; 调试陷阱标志
		DW	$ - labeltss + 2	; I/O位图基址
		DB	0ffh			; I/O位图结束标志
tsslen		equ	$ - labeltss


; 全局堆栈段
[SECTION .gs]
[BITS	32]
LABEL_STACK:
	times 512 db 0

TopOfStack	equ	$ - LABEL_STACK - 1

[SECTION .stack3]
[BITS	32]
labelstacklow:
	times 512 db 0

TopOfStackLow	equ	$ - labelstacklow - 1
; END of [SECTION .gs]

[SECTION .s16]
[BITS	16]
	number dd 0
start:
	
	
	mov	ax, cs
	mov 	ds, ax
	mov	es, ax
	mov	ss, ax
	mov	sp, 0100h

	
	;mov	[LABEL_GO_BACK_TO_REAL+3], ax
	;mov	[SPValueInRealMode], sp

	; 初始化 32 位代码段描述符
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labelcode
	mov	word [gdtcode + 2], ax
	shr	eax, 16
	mov	byte [gdtcode + 4], al
	mov	byte [gdtcode + 7], ah

	; 初始化堆栈段描述符
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, LABEL_STACK
	mov	word [gdtstack + 2], ax
	shr	eax, 16
	mov	byte [gdtstack + 4], al
	mov	byte [gdtstack + 7], ah


	;低特权极代码
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labelcodelow
	mov	word [gdtcodelow + 2], ax
	shr	eax, 16
	mov	byte [gdtcodelow + 4], al
	mov	byte [gdtcodelow + 7], ah

	;tss
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labeltss
	mov	word [gdttss + 2], ax
	shr	eax, 16
	mov	byte [gdttss + 4], al
	mov	byte [gdttss + 7], ah


	;newcode
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labelnewcode
	mov	word [gdtnewcode + 2], ax
	shr	eax, 16
	mov	byte [gdtnewcode + 4], al
	mov	byte [gdtnewcode + 7], ah

	;dos
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labeldos
	mov	word [gdtdos + 2], ax
	shr	eax, 16
	mov	byte [gdtdos + 4], al
	mov	byte [gdtdos + 7], ah

	;低特权极堆栈
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labelstacklow
	mov	word [gdtstacklow + 2], ax
	shr	eax, 16
	mov	byte [gdtstacklow + 4], al
	mov	byte [gdtstacklow + 7], ah


	; 为加载 GDTR 作准备
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, gdt	; eax <- gdt 基地址
	mov	dword [gdtptr + 2], eax	; [GdtPtr + 2] <- gdt 基地址

	; 为加载 GDTR 作准备
	xor	eax, eax
	mov	ax, cs
	shl	eax, 4
	add	eax, labelldt	; eax <- gdt 基地址
	mov	dword [ldtptr + 2], eax	; [GdtPtr + 2] <- gdt 基地址


	; 加载 GDTR
	lgdt	[gdtptr]



	; 关中断
	cli

	lldt [ldtptr]

	; 打开地址线A20
	in	al, 92h
	or	al, 00000010b
	out	92h, al



	; 准备切换到保护模式
	mov	eax, cr0
	or	eax, 1
	mov	cr0, eax
	

	; 真正进入保护模式
	jmp	dword sc:0	; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处



[SECTION .code32]
[BITS 32]
labelcode:
;开始
	mov	al, 011h
	out	020h, al	; 主8259, ICW1.
	call	io_delay

	out	0A0h, al	; 从8259, ICW1.
	call	io_delay

	mov	al, 020h	; IRQ0 对应中断向量 0x20
	out	021h, al	; 主8259, ICW2.
	call	io_delay

	mov	al, 028h	; IRQ8 对应中断向量 0x28
	out	0A1h, al	; 从8259, ICW2.
	call	io_delay

	mov	al, 004h	; IR2 对应从8259
	out	021h, al	; 主8259, ICW3.
	call	io_delay

	mov	al, 002h	; 对应主8259的 IR2
	out	0A1h, al	; 从8259, ICW3.
	call	io_delay

	mov	al, 001h
	out	021h, al	; 主8259, ICW4.
	call	io_delay

	out	0A1h, al	; 从8259, ICW4.
	call	io_delay

	mov	al, 11111110b	; 仅仅开启定时器中断
	;mov	al, 11111111b	; 屏蔽主8259所有中断
	out	021h, al	; 主8259, OCW1.
	call	io_delay

	mov	al, 11111111b	; 屏蔽从8259所有中断
	out	0A1h, al	; 从8259, OCW1.
	call	io_delay
;结束
mov ax,sv
mov gs,ax
mov edi,(80*14+0)*2
mov ah,0ch
mov al,'1'
mov [gs:edi],ax
add edi,2
mov ax,stss
ltr ax
push sstl
push TopOfStackLow
push scl
push 0
retf

io_delay:
	nop
	nop
	nop
	nop
	ret

hi equ $-$$
mov ax,sv
mov gs,ax
mov ah,0ch
mov al,'s'
mov [gs:edi],ax
add edi,2
iretd

codelen equ $-labelcode

[SECTION .codelow]
[BITS 32]
labelcodelow:
mov ax,svl
mov gs,ax
mov ah,0ch
mov al,'2'
mov [gs:edi],ax
add edi,2
int 80h
call sg:0
codelowlen equ $-labelcodelow

[SECTION .newcode]
[BITS 32]
labelnewcode:
mov ax,sv
mov gs,ax
mov ah,0ch
mov al,'3'
mov [gs:edi],ax
jmp sdos:0
newcodelen equ $-labelnewcode

[SECTION .dos]
[BITS 16]
labeldos:
mov	eax, cr0
and	al, 11111110b
mov	cr0, eax
mov	ax,0b800h
mov	es,ax
add	di,2
mov	ah,0ch
mov	al,'4'
mov	[es:di],ax
mov ax,4c00h
int 21h
doslen equ $-labeldos

